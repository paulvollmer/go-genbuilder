package main

import (
	"go/ast"
	"go/token"
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_generate(t *testing.T) {
	t.Parallel()
	testcases := []struct {
		testDescription string
		input           *GeneratorConfig
		expected        string
	}{
		{
			testDescription: "simple",
			input: &GeneratorConfig{
				Version:     "0.0.0",
				PackageName: "testpackage",
				StructName:  "TestStruct",
				Imports:     nil,
				Fields: []Field{
					{
						Name: "TestField",
						Type: "testType",
					},
				},
				BuildTags: nil,
			},
			expected: `// Code generated by go-genbuilder v0.0.0. DO NOT EDIT.

package testpackage

type TestStructBuilder struct {
	teststruct *TestStruct
}

func NewTestStructBuilder() *TestStructBuilder {
	return &TestStructBuilder{
		teststruct: &TestStruct{},
	}
}

func (builder *TestStructBuilder) SetTestField(testfield testType) *TestStructBuilder {
	builder.teststruct.TestField = testfield
	return builder
}

func (builder *TestStructBuilder) Build() *TestStruct {
	return builder.teststruct
}
`,
		},
		{
			testDescription: "with imports and build tags",
			input: &GeneratorConfig{
				Version:     "0.0.0",
				PackageName: "testpackage",
				StructName:  "TestStruct",
				Imports: []Import{
					{Name: "context", Path: "context"},
					{Name: "sample1", Path: "sample1"},
					{Name: "customalias", Path: "sample2"},
				},
				Fields: []Field{
					{
						Name: "TestField",
						Type: "testType",
					},
					{
						Name: "testOtherField",
						Type: "int",
					},
					{
						Name: "testFunc",
						Type: "func(ctx context.Context)",
					},
				},
				BuildTags: []string{
					"//go:build example",
					"// +build example",
				},
			},
			expected: `// Code generated by go-genbuilder v0.0.0. DO NOT EDIT.
//go:build example
// +build example

package testpackage

import (
	"context"
	"sample1"
	customalias "sample2"
)

type TestStructBuilder struct {
	teststruct *TestStruct
}

func NewTestStructBuilder() *TestStructBuilder {
	return &TestStructBuilder{
		teststruct: &TestStruct{},
	}
}

func (builder *TestStructBuilder) SetTestField(testfield testType) *TestStructBuilder {
	builder.teststruct.TestField = testfield
	return builder
}

func (builder *TestStructBuilder) SetTestOtherField(testotherfield int) *TestStructBuilder {
	builder.teststruct.testOtherField = testotherfield
	return builder
}

func (builder *TestStructBuilder) SetTestFunc(testfunc func(ctx context.Context)) *TestStructBuilder {
	builder.teststruct.testFunc = testfunc
	return builder
}

func (builder *TestStructBuilder) Build() *TestStruct {
	return builder.teststruct
}
`,
		},
	}

	for _, testcase := range testcases {
		testcase := testcase
		t.Run(testcase.testDescription, func(t *testing.T) {

			result, err := generate(testcase.input)
			assert.NoError(t, err)
			assert.Equal(t, testcase.expected, string(result))
		})
	}
}

func TestParseFile(t *testing.T) {
	testcases := []struct {
		name             string
		input            string
		targetStructName string
		targetLine       int
	}{
		{
			name:             "using targetStructName",
			input:            "./example/main.go",
			targetStructName: "Shape2D",
			targetLine:       -1,
		},
		{
			name:             "using targetLine",
			input:            "./example/main.go",
			targetStructName: "",
			targetLine:       17,
		},
	}

	for _, testcase := range testcases {
		t.Run(testcase.name, func(t *testing.T) {

			actual, err := ParseFile(testcase.input, testcase.targetStructName, testcase.targetLine)
			assert.NoError(t, err)

			expected := &GeneratorConfig{
				Version:     "0.4.0",
				PackageName: "main",
				StructName:  "Shape2D",
				Imports: []Import{
					{Name: "context", Path: "context"},
					{Name: "zap", Path: "go.uber.org/zap"},
				},
				Fields: []Field{
					{
						Name: "logger",
						Type: "zap.Logger",
					},
					{
						Name: "Kind",
						Type: "ShapeKind",
					},
					{
						Name: "X",
						Type: "int",
					},
					{
						Name: "Y",
						Type: "int",
					},
					{
						Name: "Callback",
						Type: "func(ctx context.Context)",
					},
				},
				BuildTags: []string{
					"//go:build example",
					"// +build example",
				},
			}
			assert.Equal(t, expected, actual)
		})
	}
}

func Test_findImports(t *testing.T) {
	testcases := []struct {
		name     string
		file     *ast.File
		expected map[string]Import
	}{
		{
			name: "simple import",
			file: &ast.File{
				Decls: []ast.Decl{
					&ast.GenDecl{
						Tok: token.IMPORT,
						Specs: []ast.Spec{
							&ast.ImportSpec{
								Name: nil,
								Path: &ast.BasicLit{Kind: token.STRING, Value: `"fmt"`},
							},
							&ast.ImportSpec{
								Name: nil,
								Path: &ast.BasicLit{Kind: token.STRING, Value: `"go.uber.org/zap"`},
							},
						},
					},
				},
			},
			expected: map[string]Import{
				"fmt": {Name: "fmt", Path: "fmt"},
				"zap": {Name: "zap", Path: "go.uber.org/zap"},
			},
		},
		{
			name: "import with name",
			file: &ast.File{
				Decls: []ast.Decl{
					&ast.GenDecl{
						Tok: token.IMPORT,
						Specs: []ast.Spec{
							&ast.ImportSpec{
								Name: nil,
								Path: &ast.BasicLit{Kind: token.STRING, Value: "fmt"},
							},
							&ast.ImportSpec{
								Name: &ast.Ident{Name: "thezap"},
								Path: &ast.BasicLit{Kind: token.STRING, Value: "go.uber.org/zap"},
							},
						},
					},
				},
			},
			expected: map[string]Import{
				"fmt":    {Name: "fmt", Path: "fmt"},
				"thezap": {Name: "thezap", Path: "go.uber.org/zap"},
			},
		},
	}

	for _, testcase := range testcases {
		testcase := testcase
		t.Run(testcase.name, func(t *testing.T) {
			result := findImports(testcase.file)
			assert.Equal(t, testcase.expected, result)
		})
	}
}
